
# ------------------------- * Data Add and Edit Logic for  3_1_1 *  ----------------------------- #
# Create Criteria 3_1_1
class CV3_1_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_1_1CreateForm
    criteria_id = "c3_1_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_1_1
class CV3_1_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_1_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_1_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_1_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_1_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_1_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_1_2 *  ----------------------------- #
# Create Criteria 3_1_2
class CV3_1_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_1_2CreateForm
    criteria_id = "c3_1_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_1_2
class CV3_1_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_1_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_1_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_1_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_1_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_1_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_1_3 *  ----------------------------- #
# Create Criteria 3_1_3
class CV3_1_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_1_3CreateForm
    criteria_id = "c3_1_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_1_3
class CV3_1_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_1_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_1_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_1_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_1_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_1_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_1_4 *  ----------------------------- #
# Create Criteria 3_1_4
class CV3_1_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_1_4CreateForm
    criteria_id = "c3_1_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_1_4
class CV3_1_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_1_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_1_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_1_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_1_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_1_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_1_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_1_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_2_1 *  ----------------------------- #
# Create Criteria 3_2_1
class CV3_2_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_2_1CreateForm
    criteria_id = "c3_2_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_2_1
class CV3_2_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_2_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_2_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_2_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_2_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_2_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_2_2 *  ----------------------------- #
# Create Criteria 3_2_2
class CV3_2_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_2_2CreateForm
    criteria_id = "c3_2_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_2_2
class CV3_2_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_2_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_2_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_2_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_2_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_2_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_2_3 *  ----------------------------- #
# Create Criteria 3_2_3
class CV3_2_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_2_3CreateForm
    criteria_id = "c3_2_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_2_3
class CV3_2_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_2_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_2_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_2_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_2_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_2_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_2_4 *  ----------------------------- #
# Create Criteria 3_2_4
class CV3_2_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_2_4CreateForm
    criteria_id = "c3_2_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_2_4
class CV3_2_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_2_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_2_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_2_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_2_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_2_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_2_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_2_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_3_1 *  ----------------------------- #
# Create Criteria 3_3_1
class CV3_3_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_3_1CreateForm
    criteria_id = "c3_3_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_3_1
class CV3_3_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_3_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_3_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_3_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_3_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_3_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_3_2 *  ----------------------------- #
# Create Criteria 3_3_2
class CV3_3_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_3_2CreateForm
    criteria_id = "c3_3_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_3_2
class CV3_3_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_3_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_3_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_3_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_3_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_3_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_3_3 *  ----------------------------- #
# Create Criteria 3_3_3
class CV3_3_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_3_3CreateForm
    criteria_id = "c3_3_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_3_3
class CV3_3_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_3_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_3_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_3_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_3_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_3_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_3_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_3_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_1 *  ----------------------------- #
# Create Criteria 3_4_1
class CV3_4_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_1CreateForm
    criteria_id = "c3_4_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_1
class CV3_4_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_2 *  ----------------------------- #
# Create Criteria 3_4_2
class CV3_4_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_2CreateForm
    criteria_id = "c3_4_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_2
class CV3_4_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_3 *  ----------------------------- #
# Create Criteria 3_4_3
class CV3_4_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_3CreateForm
    criteria_id = "c3_4_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_3
class CV3_4_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_4 *  ----------------------------- #
# Create Criteria 3_4_4
class CV3_4_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_4CreateForm
    criteria_id = "c3_4_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_4
class CV3_4_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_5 *  ----------------------------- #
# Create Criteria 3_4_5
class CV3_4_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_5CreateForm
    criteria_id = "c3_4_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_5
class CV3_4_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_6 *  ----------------------------- #
# Create Criteria 3_4_6
class CV3_4_6CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_6CreateForm
    criteria_id = "c3_4_6"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_6CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_6CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_6
class CV3_4_6UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_6UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_6"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_6'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_6UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_6UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_6UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_6UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_7 *  ----------------------------- #
# Create Criteria 3_4_7
class CV3_4_7CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_7CreateForm
    criteria_id = "c3_4_7"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_7CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_7CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_7
class CV3_4_7UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_7UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_7"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_7'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_7UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_7UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_7UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_7UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_4_8 *  ----------------------------- #
# Create Criteria 3_4_8
class CV3_4_8CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_4_8CreateForm
    criteria_id = "c3_4_8"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_8CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_8CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_4_8
class CV3_4_8UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_4_8UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_4_8"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_4_8'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_4_8UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_4_8UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_4_8UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_4_8UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_5_1 *  ----------------------------- #
# Create Criteria 3_5_1
class CV3_5_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_5_1CreateForm
    criteria_id = "c3_5_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_5_1
class CV3_5_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_5_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_5_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_5_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_5_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_5_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_5_2 *  ----------------------------- #
# Create Criteria 3_5_2
class CV3_5_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_5_2CreateForm
    criteria_id = "c3_5_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_5_2
class CV3_5_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_5_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_5_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_5_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_5_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_5_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_5_3 *  ----------------------------- #
# Create Criteria 3_5_3
class CV3_5_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_5_3CreateForm
    criteria_id = "c3_5_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_5_3
class CV3_5_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_5_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_5_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_5_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_5_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_5_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_5_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_5_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_6_1 *  ----------------------------- #
# Create Criteria 3_6_1
class CV3_6_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_6_1CreateForm
    criteria_id = "c3_6_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_6_1
class CV3_6_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_6_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_6_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_6_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_6_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_6_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_6_2 *  ----------------------------- #
# Create Criteria 3_6_2
class CV3_6_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_6_2CreateForm
    criteria_id = "c3_6_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_6_2
class CV3_6_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_6_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_6_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_6_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_6_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_6_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_6_3 *  ----------------------------- #
# Create Criteria 3_6_3
class CV3_6_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_6_3CreateForm
    criteria_id = "c3_6_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_6_3
class CV3_6_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_6_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_6_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_6_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_6_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_6_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_6_4 *  ----------------------------- #
# Create Criteria 3_6_4
class CV3_6_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_6_4CreateForm
    criteria_id = "c3_6_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_6_4
class CV3_6_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_6_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_6_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_6_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_6_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_6_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_6_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_6_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_7_1 *  ----------------------------- #
# Create Criteria 3_7_1
class CV3_7_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_7_1CreateForm
    criteria_id = "c3_7_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_7_1
class CV3_7_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_7_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_7_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_7_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_7_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_7_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_7_2 *  ----------------------------- #
# Create Criteria 3_7_2
class CV3_7_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_7_2CreateForm
    criteria_id = "c3_7_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_7_2
class CV3_7_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_7_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_7_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_7_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_7_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_7_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  3_7_3 *  ----------------------------- #
# Create Criteria 3_7_3
class CV3_7_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C3_7_3CreateForm
    criteria_id = "c3_7_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 3_7_3
class CV3_7_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C3_7_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c3_7_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c3_7_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV3_7_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV3_7_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV3_7_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV3_7_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_1 *  ----------------------------- #
# Create Criteria 4_1_1
class CV4_1_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_1CreateForm
    criteria_id = "c4_1_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_1
class CV4_1_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_2A *  ----------------------------- #
# Create Criteria 4_1_2A
class CV4_1_2ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_2ACreateForm
    criteria_id = "c4_1_2A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_2A
class CV4_1_2AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_2AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_2A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_2A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_2AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_2AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_2B *  ----------------------------- #
# Create Criteria 4_1_2B
class CV4_1_2BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_2BCreateForm
    criteria_id = "c4_1_2B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_2B
class CV4_1_2BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_2BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_2B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_2B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_2BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_2BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_2C *  ----------------------------- #
# Create Criteria 4_1_2C
class CV4_1_2CCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_2CCreateForm
    criteria_id = "c4_1_2C"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2CCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2CCreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_2C
class CV4_1_2CUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_2CUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_2C"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_2C'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_2CUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_2CUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2CUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2CUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_2D *  ----------------------------- #
# Create Criteria 4_1_2D
class CV4_1_2DCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_2DCreateForm
    criteria_id = "c4_1_2D"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2DCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2DCreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_2D
class CV4_1_2DUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_2DUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_2D"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_2D'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_2DUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_2DUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2DUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2DUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_2E *  ----------------------------- #
# Create Criteria 4_1_2E
class CV4_1_2ECreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_2ECreateForm
    criteria_id = "c4_1_2E"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2ECreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2ECreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_2E
class CV4_1_2EUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_2EUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_2E"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_2E'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_2EUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_2EUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_2EUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_2EUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_3 *  ----------------------------- #
# Create Criteria 4_1_3
class CV4_1_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_3CreateForm
    criteria_id = "c4_1_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_3
class CV4_1_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_1_4 *  ----------------------------- #
# Create Criteria 4_1_4
class CV4_1_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_1_4CreateForm
    criteria_id = "c4_1_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_1_4
class CV4_1_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_1_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_1_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_1_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_1_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_1_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_1_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_1_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_1 *  ----------------------------- #
# Create Criteria 4_2_1
class CV4_2_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_1CreateForm
    criteria_id = "c4_2_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_1
class CV4_2_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_2 *  ----------------------------- #
# Create Criteria 4_2_2
class CV4_2_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_2CreateForm
    criteria_id = "c4_2_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_2
class CV4_2_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_3 *  ----------------------------- #
# Create Criteria 4_2_3
class CV4_2_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_3CreateForm
    criteria_id = "c4_2_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_3
class CV4_2_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_4 *  ----------------------------- #
# Create Criteria 4_2_4
class CV4_2_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_4CreateForm
    criteria_id = "c4_2_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_4
class CV4_2_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_5 *  ----------------------------- #
# Create Criteria 4_2_5
class CV4_2_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_5CreateForm
    criteria_id = "c4_2_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_5
class CV4_2_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_2_6 *  ----------------------------- #
# Create Criteria 4_2_6
class CV4_2_6CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_2_6CreateForm
    criteria_id = "c4_2_6"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_6CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_6CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_2_6
class CV4_2_6UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_2_6UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_2_6"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_2_6'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_2_6UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_2_6UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_2_6UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_2_6UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_3_1 *  ----------------------------- #
# Create Criteria 4_3_1
class CV4_3_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_3_1CreateForm
    criteria_id = "c4_3_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_3_1
class CV4_3_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_3_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_3_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_3_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_3_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_3_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_3_2 *  ----------------------------- #
# Create Criteria 4_3_2
class CV4_3_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_3_2CreateForm
    criteria_id = "c4_3_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_3_2
class CV4_3_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_3_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_3_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_3_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_3_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_3_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_3_3 *  ----------------------------- #
# Create Criteria 4_3_3
class CV4_3_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_3_3CreateForm
    criteria_id = "c4_3_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_3_3
class CV4_3_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_3_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_3_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_3_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_3_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_3_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_3_4 *  ----------------------------- #
# Create Criteria 4_3_4
class CV4_3_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_3_4CreateForm
    criteria_id = "c4_3_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_3_4
class CV4_3_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_3_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_3_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_3_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_3_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_3_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_3_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_3_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_4_1 *  ----------------------------- #
# Create Criteria 4_4_1
class CV4_4_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_4_1CreateForm
    criteria_id = "c4_4_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_4_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_4_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_4_1
class CV4_4_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_4_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_4_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_4_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_4_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_4_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_4_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_4_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  4_4_2 *  ----------------------------- #
# Create Criteria 4_4_2
class CV4_4_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C4_4_2CreateForm
    criteria_id = "c4_4_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_4_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_4_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 4_4_2
class CV4_4_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C4_4_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c4_4_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c4_4_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV4_4_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV4_4_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV4_4_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV4_4_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_1 *  ----------------------------- #
# Create Criteria 5_1_1
class CV5_1_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_1CreateForm
    criteria_id = "c5_1_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_1
class CV5_1_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_2 *  ----------------------------- #
# Create Criteria 5_1_2
class CV5_1_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_2CreateForm
    criteria_id = "c5_1_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_2
class CV5_1_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3A *  ----------------------------- #
# Create Criteria 5_1_3A
class CV5_1_3ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3ACreateForm
    criteria_id = "c5_1_3A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3A
class CV5_1_3AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3B *  ----------------------------- #
# Create Criteria 5_1_3B
class CV5_1_3BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3BCreateForm
    criteria_id = "c5_1_3B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3B
class CV5_1_3BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3C *  ----------------------------- #
# Create Criteria 5_1_3C
class CV5_1_3CCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3CCreateForm
    criteria_id = "c5_1_3C"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3CCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3CCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3C
class CV5_1_3CUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3CUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3C"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3C'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3CUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3CUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3CUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3CUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3D *  ----------------------------- #
# Create Criteria 5_1_3D
class CV5_1_3DCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3DCreateForm
    criteria_id = "c5_1_3D"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3DCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3DCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3D
class CV5_1_3DUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3DUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3D"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3D'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3DUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3DUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3DUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3DUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3E *  ----------------------------- #
# Create Criteria 5_1_3E
class CV5_1_3ECreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3ECreateForm
    criteria_id = "c5_1_3E"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3ECreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3ECreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3E
class CV5_1_3EUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3EUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3E"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3E'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3EUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3EUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3EUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3EUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3F *  ----------------------------- #
# Create Criteria 5_1_3F
class CV5_1_3FCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3FCreateForm
    criteria_id = "c5_1_3F"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3FCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3FCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3F
class CV5_1_3FUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3FUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3F"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3F'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3FUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3FUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3FUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3FUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3G *  ----------------------------- #
# Create Criteria 5_1_3G
class CV5_1_3GCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3GCreateForm
    criteria_id = "c5_1_3G"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3GCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3GCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3G
class CV5_1_3GUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3GUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3G"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3G'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3GUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3GUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3GUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3GUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_3H *  ----------------------------- #
# Create Criteria 5_1_3H
class CV5_1_3HCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_3HCreateForm
    criteria_id = "c5_1_3H"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3HCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3HCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_3H
class CV5_1_3HUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_3HUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_3H"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_3H'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_3HUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_3HUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_3HUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_3HUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_4 *  ----------------------------- #
# Create Criteria 5_1_4
class CV5_1_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_4CreateForm
    criteria_id = "c5_1_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_4
class CV5_1_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_5 *  ----------------------------- #
# Create Criteria 5_1_5
class CV5_1_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_5CreateForm
    criteria_id = "c5_1_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_5
class CV5_1_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_1_6 *  ----------------------------- #
# Create Criteria 5_1_6
class CV5_1_6CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_1_6CreateForm
    criteria_id = "c5_1_6"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_6CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_6CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_1_6
class CV5_1_6UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_1_6UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_1_6"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_1_6'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_1_6UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_1_6UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_1_6UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_1_6UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_2_1 *  ----------------------------- #
# Create Criteria 5_2_1
class CV5_2_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_2_1CreateForm
    criteria_id = "c5_2_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_2_1
class CV5_2_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_2_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_2_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_2_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_2_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_2_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_2_2 *  ----------------------------- #
# Create Criteria 5_2_2
class CV5_2_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_2_2CreateForm
    criteria_id = "c5_2_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_2_2
class CV5_2_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_2_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_2_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_2_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_2_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_2_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_2_3 *  ----------------------------- #
# Create Criteria 5_2_3
class CV5_2_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_2_3CreateForm
    criteria_id = "c5_2_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_2_3
class CV5_2_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_2_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_2_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_2_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_2_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_2_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_2_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_2_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_3_1 *  ----------------------------- #
# Create Criteria 5_3_1
class CV5_3_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_3_1CreateForm
    criteria_id = "c5_3_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_3_1
class CV5_3_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_3_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_3_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_3_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_3_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_3_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_3_2A *  ----------------------------- #
# Create Criteria 5_3_2A
class CV5_3_2ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_3_2ACreateForm
    criteria_id = "c5_3_2A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_2ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_2ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_3_2A
class CV5_3_2AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_3_2AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_3_2A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_3_2A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_3_2AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_3_2AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_2AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_2AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_3_2B *  ----------------------------- #
# Create Criteria 5_3_2B
class CV5_3_2BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_3_2BCreateForm
    criteria_id = "c5_3_2B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_2BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_2BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_3_2B
class CV5_3_2BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_3_2BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_3_2B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_3_2B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_3_2BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_3_2BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_2BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_2BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_3_3 *  ----------------------------- #
# Create Criteria 5_3_3
class CV5_3_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_3_3CreateForm
    criteria_id = "c5_3_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_3_3
class CV5_3_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_3_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_3_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_3_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_3_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_3_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_3_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_3_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_4_1A *  ----------------------------- #
# Create Criteria 5_4_1A
class CV5_4_1ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_4_1ACreateForm
    criteria_id = "c5_4_1A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_1ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_1ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_4_1A
class CV5_4_1AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_4_1AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_4_1A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_4_1A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_4_1AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_4_1AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_1AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_1AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_4_1B *  ----------------------------- #
# Create Criteria 5_4_1B
class CV5_4_1BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_4_1BCreateForm
    criteria_id = "c5_4_1B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_1BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_1BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_4_1B
class CV5_4_1BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_4_1BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_4_1B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_4_1B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_4_1BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_4_1BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_1BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_1BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  5_4_2 *  ----------------------------- #
# Create Criteria 5_4_2
class CV5_4_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C5_4_2CreateForm
    criteria_id = "c5_4_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 5_4_2
class CV5_4_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C5_4_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c5_4_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c5_4_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV5_4_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV5_4_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV5_4_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV5_4_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_1_1 *  ----------------------------- #
# Create Criteria 6_1_1
class CV6_1_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_1_1CreateForm
    criteria_id = "c6_1_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_1_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_1_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_1_1
class CV6_1_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_1_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_1_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_1_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_1_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_1_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_1_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_1_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_1_2 *  ----------------------------- #
# Create Criteria 6_1_2
class CV6_1_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_1_2CreateForm
    criteria_id = "c6_1_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_1_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_1_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_1_2
class CV6_1_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_1_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_1_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_1_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_1_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_1_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_1_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_1_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_2_1 *  ----------------------------- #
# Create Criteria 6_2_1
class CV6_2_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_2_1CreateForm
    criteria_id = "c6_2_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_2_1
class CV6_2_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_2_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_2_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_2_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_2_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_2_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_2_2 *  ----------------------------- #
# Create Criteria 6_2_2
class CV6_2_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_2_2CreateForm
    criteria_id = "c6_2_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_2_2
class CV6_2_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_2_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_2_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_2_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_2_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_2_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_2_3 *  ----------------------------- #
# Create Criteria 6_2_3
class CV6_2_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_2_3CreateForm
    criteria_id = "c6_2_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_2_3
class CV6_2_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_2_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_2_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_2_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_2_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_2_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_2_4 *  ----------------------------- #
# Create Criteria 6_2_4
class CV6_2_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_2_4CreateForm
    criteria_id = "c6_2_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_2_4
class CV6_2_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_2_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_2_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_2_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_2_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_2_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_2_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_2_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_3_1 *  ----------------------------- #
# Create Criteria 6_3_1
class CV6_3_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_3_1CreateForm
    criteria_id = "c6_3_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_3_1
class CV6_3_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_3_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_3_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_3_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_3_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_3_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_3_2 *  ----------------------------- #
# Create Criteria 6_3_2
class CV6_3_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_3_2CreateForm
    criteria_id = "c6_3_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_3_2
class CV6_3_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_3_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_3_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_3_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_3_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_3_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_3_3 *  ----------------------------- #
# Create Criteria 6_3_3
class CV6_3_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_3_3CreateForm
    criteria_id = "c6_3_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_3_3
class CV6_3_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_3_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_3_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_3_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_3_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_3_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_3_4 *  ----------------------------- #
# Create Criteria 6_3_4
class CV6_3_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_3_4CreateForm
    criteria_id = "c6_3_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_3_4
class CV6_3_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_3_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_3_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_3_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_3_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_3_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_3_5 *  ----------------------------- #
# Create Criteria 6_3_5
class CV6_3_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_3_5CreateForm
    criteria_id = "c6_3_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_3_5
class CV6_3_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_3_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_3_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_3_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_3_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_3_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_3_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_3_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_4_1 *  ----------------------------- #
# Create Criteria 6_4_1
class CV6_4_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_4_1CreateForm
    criteria_id = "c6_4_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_4_1
class CV6_4_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_4_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_4_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_4_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_4_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_4_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_4_2 *  ----------------------------- #
# Create Criteria 6_4_2
class CV6_4_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_4_2CreateForm
    criteria_id = "c6_4_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_4_2
class CV6_4_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_4_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_4_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_4_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_4_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_4_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_4_3 *  ----------------------------- #
# Create Criteria 6_4_3
class CV6_4_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_4_3CreateForm
    criteria_id = "c6_4_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_4_3
class CV6_4_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_4_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_4_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_4_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_4_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_4_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_4_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_4_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_5_1 *  ----------------------------- #
# Create Criteria 6_5_1
class CV6_5_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_5_1CreateForm
    criteria_id = "c6_5_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_5_1
class CV6_5_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_5_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_5_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_5_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_5_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_5_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_5_2 *  ----------------------------- #
# Create Criteria 6_5_2
class CV6_5_2CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_5_2CreateForm
    criteria_id = "c6_5_2"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_2CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_2CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_5_2
class CV6_5_2UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_5_2UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_5_2"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_5_2'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_5_2UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_5_2UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_2UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_2UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_5_3 *  ----------------------------- #
# Create Criteria 6_5_3
class CV6_5_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_5_3CreateForm
    criteria_id = "c6_5_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_5_3
class CV6_5_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_5_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_5_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_5_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_5_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_5_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_5_4 *  ----------------------------- #
# Create Criteria 6_5_4
class CV6_5_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_5_4CreateForm
    criteria_id = "c6_5_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_5_4
class CV6_5_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_5_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_5_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_5_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_5_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_5_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  6_5_5 *  ----------------------------- #
# Create Criteria 6_5_5
class CV6_5_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C6_5_5CreateForm
    criteria_id = "c6_5_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 6_5_5
class CV6_5_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C6_5_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c6_5_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c6_5_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV6_5_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV6_5_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV6_5_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV6_5_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_1 *  ----------------------------- #
# Create Criteria 7_1_1
class CV7_1_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_1CreateForm
    criteria_id = "c7_1_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_1
class CV7_1_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_2A *  ----------------------------- #
# Create Criteria 7_1_2A
class CV7_1_2ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_2ACreateForm
    criteria_id = "c7_1_2A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_2A
class CV7_1_2AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_2AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_2A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_2A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_2AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_2AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_2B *  ----------------------------- #
# Create Criteria 7_1_2B
class CV7_1_2BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_2BCreateForm
    criteria_id = "c7_1_2B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_2B
class CV7_1_2BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_2BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_2B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_2B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_2BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_2BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_2C *  ----------------------------- #
# Create Criteria 7_1_2C
class CV7_1_2CCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_2CCreateForm
    criteria_id = "c7_1_2C"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2CCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2CCreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_2C
class CV7_1_2CUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_2CUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_2C"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_2C'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_2CUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_2CUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_2CUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_2CUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_3 *  ----------------------------- #
# Create Criteria 7_1_3
class CV7_1_3CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_3CreateForm
    criteria_id = "c7_1_3"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_3CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_3CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_3
class CV7_1_3UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_3UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_3"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_3'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_3UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_3UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_3UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_3UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_4 *  ----------------------------- #
# Create Criteria 7_1_4
class CV7_1_4CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_4CreateForm
    criteria_id = "c7_1_4"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_4CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_4CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_4
class CV7_1_4UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_4UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_4"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_4'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_4UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_4UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_4UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_4UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_5 *  ----------------------------- #
# Create Criteria 7_1_5
class CV7_1_5CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_5CreateForm
    criteria_id = "c7_1_5"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_5CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_5CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_5
class CV7_1_5UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_5UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_5"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_5'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_5UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_5UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_5UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_5UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_6 *  ----------------------------- #
# Create Criteria 7_1_6
class CV7_1_6CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_6CreateForm
    criteria_id = "c7_1_6"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_6CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_6CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_6
class CV7_1_6UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_6UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_6"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_6'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_6UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_6UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_6UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_6UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_7A *  ----------------------------- #
# Create Criteria 7_1_7A
class CV7_1_7ACreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_7ACreateForm
    criteria_id = "c7_1_7A"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7ACreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7ACreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_7A
class CV7_1_7AUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_7AUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_7A"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_7A'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_7AUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_7AUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7AUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7AUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_7B *  ----------------------------- #
# Create Criteria 7_1_7B
class CV7_1_7BCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_7BCreateForm
    criteria_id = "c7_1_7B"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7BCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7BCreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_7B
class CV7_1_7BUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_7BUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_7B"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_7B'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_7BUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_7BUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7BUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7BUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_7C *  ----------------------------- #
# Create Criteria 7_1_7C
class CV7_1_7CCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_7CCreateForm
    criteria_id = "c7_1_7C"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7CCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7CCreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_7C
class CV7_1_7CUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_7CUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_7C"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_7C'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_7CUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_7CUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7CUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7CUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_7D *  ----------------------------- #
# Create Criteria 7_1_7D
class CV7_1_7DCreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_7DCreateForm
    criteria_id = "c7_1_7D"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7DCreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7DCreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_7D
class CV7_1_7DUpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_7DUpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_7D"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_7D'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_7DUpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_7DUpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_7DUpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_7DUpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_8 *  ----------------------------- #
# Create Criteria 7_1_8
class CV7_1_8CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_8CreateForm
    criteria_id = "c7_1_8"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_8CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_8CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_8
class CV7_1_8UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_8UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_8"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_8'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_8UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_8UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_8UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_8UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_9 *  ----------------------------- #
# Create Criteria 7_1_9
class CV7_1_9CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_9CreateForm
    criteria_id = "c7_1_9"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_9CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_9CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_9
class CV7_1_9UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_9UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_9"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_9'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_9UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_9UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_9UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_9UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_10 *  ----------------------------- #
# Create Criteria 7_1_10
class CV7_1_10CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_10CreateForm
    criteria_id = "c7_1_10"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_10CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_10CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_10
class CV7_1_10UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_10UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_10"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_10'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_10UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_10UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_10UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_10UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_11 *  ----------------------------- #
# Create Criteria 7_1_11
class CV7_1_11CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_11CreateForm
    criteria_id = "c7_1_11"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_11CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_11CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_11
class CV7_1_11UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_11UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_11"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_11'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_11UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_11UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_11UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_11UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_12 *  ----------------------------- #
# Create Criteria 7_1_12
class CV7_1_12CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_12CreateForm
    criteria_id = "c7_1_12"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_12CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_12CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_12
class CV7_1_12UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_12UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_12"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_12'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_12UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_12UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_12UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_12UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_13 *  ----------------------------- #
# Create Criteria 7_1_13
class CV7_1_13CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_13CreateForm
    criteria_id = "c7_1_13"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_13CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_13CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_13
class CV7_1_13UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_13UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_13"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_13'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_13UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_13UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_13UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_13UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_14 *  ----------------------------- #
# Create Criteria 7_1_14
class CV7_1_14CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_14CreateForm
    criteria_id = "c7_1_14"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_14CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_14CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_14
class CV7_1_14UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_14UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_14"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_14'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_14UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_14UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_14UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_14UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_15 *  ----------------------------- #
# Create Criteria 7_1_15
class CV7_1_15CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_15CreateForm
    criteria_id = "c7_1_15"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_15CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_15CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_15
class CV7_1_15UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_15UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_15"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_15'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_15UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_15UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_15UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_15UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_16 *  ----------------------------- #
# Create Criteria 7_1_16
class CV7_1_16CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_16CreateForm
    criteria_id = "c7_1_16"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_16CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_16CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_16
class CV7_1_16UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_16UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_16"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_16'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_16UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_16UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_16UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_16UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_17 *  ----------------------------- #
# Create Criteria 7_1_17
class CV7_1_17CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_17CreateForm
    criteria_id = "c7_1_17"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_17CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_17CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_17
class CV7_1_17UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_17UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_17"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_17'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_17UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_17UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_17UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_17UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_18 *  ----------------------------- #
# Create Criteria 7_1_18
class CV7_1_18CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_18CreateForm
    criteria_id = "c7_1_18"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_18CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_18CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_18
class CV7_1_18UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_18UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_18"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_18'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_18UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_18UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_18UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_18UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_1_19 *  ----------------------------- #
# Create Criteria 7_1_19
class CV7_1_19CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_1_19CreateForm
    criteria_id = "c7_1_19"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_19CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_19CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_1_19
class CV7_1_19UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_1_19UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_1_19"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_1_19'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_1_19UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_1_19UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_1_19UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_1_19UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_2_1 *  ----------------------------- #
# Create Criteria 7_2_1
class CV7_2_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_2_1CreateForm
    criteria_id = "c7_2_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_2_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_2_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_2_1
class CV7_2_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_2_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_2_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_2_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_2_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_2_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_2_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_2_1UpdateView, self).__init__(*args, **kwargs)

    
# ------------------------- * Data Add and Edit Logic for  7_3_1 *  ----------------------------- #
# Create Criteria 7_3_1
class CV7_3_1CreateView(LoginRequiredMixin, CreateView):
    template_name = "criteria/create.html"
    success_message = "Successfully Created"
    form_class = C7_3_1CreateForm
    criteria_id = "c7_3_1"
    create_form_url = 'criterions:c' + criteria_id
    success_url = '/criteria/show/' + criteria_id

    def form_valid(self, form):
        self.object = form.save(commit=False)
        self.object.user = self.request.user
        self.object.criterion = self.criteria_id
        self.object.cr_index = self.criteria_id[1]
        try:
            self.object.final_criteria = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            pass
        self.object.save()
        messages.add_message(self.request, messages.SUCCESS, self.success_message)
        if "add-next" in self.request.POST:
            return HttpResponseRedirect(reverse(self.create_form_url))
        return HttpResponseRedirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_3_1CreateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_3_1CreateView, self).__init__(*args, **kwargs)


# Update Criteria 7_3_1
class CV7_3_1UpdateView(LoginRequiredMixin, UpdateView):
    model = CriterionMaster
    form_class = C7_3_1UpdateForm
    template_name = "criteria/update.html"
    criteria_id = "c7_3_1"
    success_url = '/criteria/show/' + criteria_id

    def get_success_url(self):
        return '{}#criterions'.format(reverse('criterions:show-criteria', kwargs={'slug': 'c7_3_1'}))

    def form_valid(self, form):
        instance = form.save(commit=False)
        if (instance.user == self.request.user) and (instance.status in ("PENDING", "REVERTED")):
            messages.add_message(self.request, messages.SUCCESS, "Updated Page")
            return super(CV7_3_1UpdateView, self).form_valid(form)

        elif str(self.request.user.user_scope) in ("ADMIN", "NAAC_COD"):
            messages.add_message(self.request, messages.INFO, "Updated Data by Admin is done!")
            return super(CV7_3_1UpdateView, self).form_valid(form)

        messages.add_message(self.request, messages.ERROR, "Edit Permission Error.!")
        return redirect(self.success_url)

    def get_form_kwargs(self, *args, **kwargs):
        kwargs = super(CV7_3_1UpdateView, self).get_form_kwargs(*args, **kwargs)
        kwargs['user'] = self.request.user
        return kwargs

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["cr_data"] = self.final_criteria_id
        context["obj_id"] = self.object.id
        return context

    def __init__(self, *args, **kwargs):
        try:
            self.final_criteria_id = FinalCriteria.objects.get(criteria_id=self.criteria_id)
        except:
            self.final_criteria_id = None
        super(CV7_3_1UpdateView, self).__init__(*args, **kwargs)

    